{"version":3,"sources":["hooks/useMLRApi/useMLRApi.tsx","components/playTable/playTable.tsx","components/lineGraph/lineGraph.tsx","components/pages/gamePage/gamePage.tsx","hooks/useGetGameLog/useGetGameLog.tsx","hooks/useGetGames/useGetGames.tsx","components/pages/playerPage/playerPage.tsx","components/routes/Routes.tsx","components/app/App.tsx","index.tsx"],"names":["useMLRApi","apiVerson","useFetch","PlayTable","props","plays","data","React","useMemo","inningsMap","reduce","acc","p","beforeState","inning","push","id","pitcher","firstName","lastName","batter","pitch","swing","diff","result","score","afterState","awayScore","homeScore","inningTableColumns","Object","entries","forEach","index","children","Table","isTree","defaultExpandAllRows","rowKey","Column","flexGrow","HeaderCell","Cell","dataKey","LineGraph","options","chart","zoom","enabled","redrawOnParentResize","xaxis","categories","Array","length","keys","map","x","markers","size","showNullDataPoints","series","name","play","type","height","GamePage","useState","selectedTab","setSelectedTab","selectedSeason","setSelectedSeason","selectedSession","setSelectedSession","selectedGame","setSelectedGame","gameLog","setGameLog","get","response","loading","error","useCallback","gameId","a","fetchedGameLog","ok","useGetGameLog","loadingGameLogs","fetchGameLog","games","setGames","season","session","useGetGames","loadingGames","fetchGames","useEffect","fetchGamesWrapper","undefined","Container","style","Header","FlexboxGrid","justify","Item","colspan","value","label","styles","menuPortal","base","zIndex","menuPortalTarget","document","body","onChange","s","isLoading","awayTeam","homeTeam","game","g","Content","align","width","flexDirection","Loader","Nav","appearance","activeKey","onSelect","e","eventKey","filter","reverse","PlayerPage","Routes","basename","exact","from","to","path","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d30bb9c8.chunk.js","sourcesContent":["import useFetch from \"use-http\";\n\nexport const useMLRApi = <T,>(apiVerson: string = \"v1\") => {\n  return useFetch<T>(`https://redditball.com/api/${apiVerson}`);\n};\n","import React from \"react\";\nimport { Play } from \"../../interfaces/play\";\nimport { Table } from \"rsuite\";\n\ninterface TableColumn {\n  id: number;\n  pitcher: string;\n  batter: string;\n  pitch: number;\n  swing: number;\n  diff: number;\n  result: string;\n  score: string;\n}\n\ninterface PlayTableProps {\n  plays: Play[];\n}\n\nexport const PlayTable = (props: PlayTableProps) => {\n  const { plays } = props;\n\n  const data = React.useMemo(() => {\n    const inningsMap = plays.reduce(\n      (acc: { [inning: string]: TableColumn[] }, p: Play) => {\n        if (!acc[p.beforeState.inning]) {\n          acc[p.beforeState.inning] = [];\n        }\n\n        acc[p.beforeState.inning].push({\n          id: p.id,\n          pitcher: p.pitcher.firstName + \" \" + p.pitcher.lastName,\n          batter: p.batter.firstName + \" \" + p.batter.lastName,\n          pitch: p.pitch,\n          swing: p.swing,\n          diff: p.diff,\n          result: p.result,\n          score: p.afterState.awayScore + \"-\" + p.afterState.homeScore\n        });\n\n        return acc;\n      },\n      {}\n    );\n\n    const inningTableColumns: any[] = [];\n    Object.entries(inningsMap).forEach(([inning, plays], index) => {\n      inningTableColumns.push({\n        id: index,\n        inning: inning,\n        children: plays\n      });\n    });\n\n    return inningTableColumns;\n  }, [plays]);\n\n  return (\n    <div>\n      <Table isTree defaultExpandAllRows rowKey=\"id\" data={data}>\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Inning</Table.HeaderCell>\n          <Table.Cell dataKey=\"inning\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Pitcher</Table.HeaderCell>\n          <Table.Cell dataKey=\"pitcher\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Batter</Table.HeaderCell>\n          <Table.Cell dataKey=\"batter\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Pitch</Table.HeaderCell>\n          <Table.Cell dataKey=\"pitch\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Swing</Table.HeaderCell>\n          <Table.Cell dataKey=\"swing\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Diff</Table.HeaderCell>\n          <Table.Cell dataKey=\"diff\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Result</Table.HeaderCell>\n          <Table.Cell dataKey=\"result\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Score</Table.HeaderCell>\n          <Table.Cell dataKey=\"score\" />\n        </Table.Column>\n      </Table>\n    </div>\n  );\n};\n","import { useMemo } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { Play } from \"../../interfaces/play\";\n\ninterface LineGraphProps {\n  plays: Play[];\n}\n\nexport const LineGraph = (props: LineGraphProps) => {\n  const { plays } = props;\n\n  const options = useMemo(\n    () => ({\n      chart: {\n        id: \"line\",\n        zoom: {\n          enabled: false\n        },\n        redrawOnParentResize: false\n      },\n      xaxis: {\n        categories: [...Array(plays.length).keys()].map(x => ++x)\n      },\n      markers: {\n        size: 5,\n        showNullDataPoints: false\n      }\n    }),\n    [plays]\n  );\n\n  const series = useMemo(\n    () => [\n      {\n        name: \"pitches\",\n        data: plays.map((play: Play) => play.pitch)\n      }\n    ],\n    [plays]\n  );\n\n  return (\n    <ReactApexChart\n      options={options}\n      series={series}\n      type=\"line\"\n      height=\"100%\"\n    />\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useGetGameLog } from \"../../../hooks/useGetGameLog/useGetGameLog\";\nimport Select from \"react-select\";\nimport { useGetGames } from \"../../../hooks/useGetGames/useGetGames\";\nimport { Game } from \"../../../interfaces/game\";\nimport { PlayTable } from \"../../playTable/playTable\";\nimport { Play } from \"../../../interfaces/play\";\nimport { LineGraph } from \"../../lineGraph/lineGraph\";\nimport { Container, Content, FlexboxGrid, Header, Loader, Nav } from \"rsuite\";\n\nexport const GamePage: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [selectedSeason, setSelectedSeason] = useState(6);\n  const [selectedSession, setSelectedSession] = useState(1);\n  const [selectedGame, setSelectedGame] = useState<Game>();\n\n  const [gameLog, loadingGameLogs, , fetchGameLog] = useGetGameLog();\n  const [games, loadingGames, , fetchGames] = useGetGames();\n\n  useEffect(() => {\n    const fetchGamesWrapper = async () => {\n      await fetchGames(selectedSeason, selectedSession);\n    };\n    fetchGamesWrapper();\n\n    setSelectedGame(undefined);\n  }, [selectedSeason, selectedSession, fetchGames]);\n\n  useEffect(() => {\n    if (selectedGame) {\n      fetchGameLog(selectedGame.id);\n    }\n  }, [selectedGame, fetchGameLog]);\n\n  return (\n    <Container style={{ height: \"100%\" }}>\n      <Header>\n        <FlexboxGrid justify=\"end\">\n          <FlexboxGrid.Item colspan={3}>\n            <Select\n              value={{ label: selectedSeason, value: selectedSeason }}\n              styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\n              menuPortalTarget={document.body}\n              onChange={(season: any) => {\n                setSelectedSeason(season.value);\n              }}\n              options={[...Array(6).keys()]\n                .map(x => ++x)\n                .map(s => ({ label: s, value: s }))}\n            />\n          </FlexboxGrid.Item>\n\n          <FlexboxGrid.Item colspan={3}>\n            <Select\n              value={{ label: selectedSession, value: selectedSession }}\n              styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\n              menuPortalTarget={document.body}\n              onChange={(season: any) => {\n                setSelectedSession(season.value);\n              }}\n              options={[...Array(21).keys()]\n                .map(x => ++x)\n                .map(s => ({ label: s, value: s }))}\n            />\n          </FlexboxGrid.Item>\n\n          <FlexboxGrid.Item colspan={6}>\n            <Select\n              isLoading={loadingGames}\n              styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\n              menuPortalTarget={document.body}\n              value={{\n                label: selectedGame\n                  ? `${selectedGame.awayTeam.name} @ ${selectedGame.homeTeam.name}`\n                  : \"Pick game\",\n                value: selectedGame\n              }}\n              onChange={(game: any) => {\n                setSelectedGame(game.value);\n              }}\n              options={games?.map(g => ({\n                label: `${g.awayTeam.name} @ ${g.homeTeam.name}`,\n                value: g\n              }))}\n            />\n          </FlexboxGrid.Item>\n        </FlexboxGrid>\n      </Header>\n\n      <Content style={{ height: \"100%\" }}>\n        <FlexboxGrid\n          justify=\"center\"\n          align=\"middle\"\n          style={{ height: \"100%\", width: \"100%\", flexDirection: \"column\" }}\n        >\n          {loadingGameLogs ? (\n            <Loader size=\"lg\" />\n          ) : selectedGame && gameLog ? (\n            <FlexboxGrid.Item style={{ width: \"100%\", height: \"100%\" }}>\n              <Nav\n                appearance={\"tabs\"}\n                activeKey={selectedTab}\n                onSelect={(e: any) => {\n                  setSelectedTab(e);\n                }}\n              >\n                <Nav.Item eventKey={0}>{selectedGame.awayTeam.name}</Nav.Item>\n                <Nav.Item eventKey={1}>{selectedGame.homeTeam.name}</Nav.Item>\n              </Nav>\n\n              <FlexboxGrid.Item style={{ height: \"auto\" }}>\n                <PlayTable\n                  plays={gameLog\n                    .filter(\n                      (p: Play) =>\n                        p.beforeState.inning[0] ===\n                        (selectedTab === 0 ? \"B\" : \"T\")\n                    )\n                    .reverse()}\n                />\n                <LineGraph\n                  plays={gameLog\n                    .filter(\n                      (p: Play) =>\n                        p.beforeState.inning[0] ===\n                        (selectedTab === 0 ? \"B\" : \"T\")\n                    )\n                    .reverse()}\n                />\n              </FlexboxGrid.Item>\n            </FlexboxGrid.Item>\n          ) : (\n            \"Select a game\"\n          )}\n        </FlexboxGrid>\n      </Content>\n    </Container>\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { Play } from \"../../interfaces/play\";\nimport { useMLRApi } from \"../useMLRApi/useMLRApi\";\n\nexport const useGetGameLog = (): [\n  Play[] | undefined,\n  boolean,\n  any,\n  (gameId: number) => Promise<Play[]>\n] => {\n  const [gameLog, setGameLog] = useState<Play[]>();\n  const { get, response, loading, error } = useMLRApi<Play[]>();\n\n  const fetchGameLog = useCallback(\n    async (gameId: number) => {\n      const fetchedGameLog = (await get(`games/${gameId}/log`)) as Play[];\n\n      if (response.ok) {\n        setGameLog(fetchedGameLog);\n      }\n\n      return fetchedGameLog;\n    },\n    [get, setGameLog, response]\n  );\n\n  return [gameLog, loading, error, fetchGameLog];\n};\n","import { useCallback, useState } from \"react\";\nimport { Game } from \"../../interfaces/game\";\nimport { useMLRApi } from \"../useMLRApi/useMLRApi\";\n\nexport const useGetGames = (): [\n  Game[] | undefined,\n  boolean,\n  any,\n  (season: number, session: number) => Promise<Game[]>\n] => {\n  const [games, setGames] = useState<Game[]>();\n  const { get, response, loading, error } = useMLRApi<Game[]>();\n\n  const fetchGameLog = useCallback(\n    async (season: number, session: number) => {\n      const fetchedGameLog = (await get(\n        `games/${season}/${session}`\n      )) as Game[];\n\n      if (response.ok) {\n        setGames(fetchedGameLog);\n      }\n\n      return fetchedGameLog;\n    },\n    [get, setGames, response]\n  );\n\n  return [games, loading, error, fetchGameLog];\n};\n","export const PlayerPage: React.FC = () => {\n  return <> Coming soon: a player page.</>;\n};\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport { GamePage } from \"../pages/gamePage/gamePage\";\nimport { PlayerPage } from \"../pages/playerPage/playerPage\";\n\nexport const Routes: React.FC = () => {\n  return (\n    <Router basename=\"/fake-baseball-scouting-page/\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/game\" />\n        <Route path=\"/game\">\n          <GamePage />\n        </Route>\n        <Route path=\"/player\">\n          <PlayerPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Routes } from \"../routes/Routes\";\n\nimport \"rsuite/dist/styles/rsuite-default.css\";\n\nexport const App: React.FC = () => {\n  return (\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\n      <Routes />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}