{"version":3,"sources":["context/LeagueToggleContext/leagueToggleContext.tsx","hooks/useRedditBallApi/useRedditBallApi.tsx","components/playTable/playTable.tsx","components/lineGraph/lineGraph.tsx","components/pages/gamePage/gamePage.tsx","hooks/useGetGameLog/useGetGameLog.tsx","hooks/useGetGames/useGetGames.tsx","components/pages/playerPage/playerPage.tsx","components/routes/Routes.tsx","components/app/App.tsx","index.tsx"],"names":["LeagueToggleContext","React","createContext","currentLeague","setCurrentLeague","LeagueToggleContextProvider","props","useState","Provider","value","useLeagueToggleContext","context","useContext","Error","useRedditBallApi","apiVerson","useFetch","PlayTable","plays","data","useMemo","inningsMap","reduce","acc","p","beforeState","inning","push","id","pitcher","firstName","lastName","batter","pitch","swing","diff","result","score","afterState","awayScore","homeScore","inningTableColumns","Object","entries","forEach","index","children","Table","isTree","defaultExpandAllRows","rowKey","Column","flexGrow","HeaderCell","Cell","dataKey","LineGraph","options","chart","zoom","enabled","redrawOnParentResize","xaxis","categories","Array","length","keys","map","x","markers","size","showNullDataPoints","stroke","width","dashArray","yaxis","min","max","series","name","type","play","currentPlay","delta","Math","abs","height","GamePage","selectedTab","setSelectedTab","selectedSeason","setSelectedSeason","selectedSession","setSelectedSession","selectedGame","setSelectedGame","gameLog","setGameLog","get","response","loading","error","useCallback","gameId","a","fetchedGameLog","ok","useGetGameLog","loadingGameLogs","fetchGameLog","games","setGames","season","session","useGetGames","loadingGames","fetchGames","console","log","useEffect","fetchGamesWrapper","undefined","Container","style","Header","FlexboxGrid","justify","padding","Item","Toggle","checked","onChange","checkedChildren","unCheckedChildren","colspan","label","styles","menuPortal","base","zIndex","menuPortalTarget","document","body","s","isLoading","awayTeam","homeTeam","game","g","Content","align","flexDirection","Loader","Nav","appearance","activeKey","onSelect","e","eventKey","filter","reverse","PlayerPage","Routes","basename","exact","from","to","path","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.78bd6fba.chunk.js","sourcesContent":["import React, { useState, ProviderProps } from \"react\";\n\nexport interface LeagueToggleContextProps {\n  currentLeague: \"mlr\" | \"milr\";\n  setCurrentLeague: React.Dispatch<React.SetStateAction<\"mlr\" | \"milr\">>;\n}\n\ninterface LeagueToggleContextProviderProps\n  extends Omit<ProviderProps<LeagueToggleContextProps>, \"value\"> {}\n\nexport const LeagueToggleContext = React.createContext<\n  LeagueToggleContextProps\n>({\n  currentLeague: \"mlr\",\n  setCurrentLeague: () => {}\n});\n\nexport const LeagueToggleContextProvider = (\n  props: LeagueToggleContextProviderProps\n) => {\n  const [currentLeague, setCurrentLeague] = useState<\"mlr\" | \"milr\">(\"mlr\");\n\n  return (\n    <LeagueToggleContext.Provider\n      value={{ currentLeague, setCurrentLeague }}\n      {...props}\n    />\n  );\n};\n\nexport const useLeagueToggleContext = () => {\n  const context = React.useContext(LeagueToggleContext);\n  if (context == null) {\n    throw new Error(\"LeagueToggleContext must be used inside provider\");\n  }\n  return context;\n};\n","import useFetch from \"use-http\";\nimport { useLeagueToggleContext } from \"../../context/LeagueToggleContext/leagueToggleContext\";\n\nexport const useRedditBallApi = <T,>(apiVerson: string = \"v1\") => {\n  const { currentLeague } = useLeagueToggleContext();\n\n  return useFetch<T>(\n    `https://${\n      currentLeague === \"milr\" ? currentLeague + \".\" : \"\"\n    }redditball.com/api/${apiVerson}`\n  );\n};\n","import React from \"react\";\nimport { Play } from \"../../interfaces/play\";\nimport { Table } from \"rsuite\";\n\ninterface TableColumn {\n  id: number;\n  pitcher: string;\n  batter: string;\n  pitch: number;\n  swing: number;\n  diff: number;\n  result: string;\n  score: string;\n}\n\ninterface PlayTableProps {\n  plays: Play[];\n}\n\nexport const PlayTable = (props: PlayTableProps) => {\n  const { plays } = props;\n\n  const data = React.useMemo(() => {\n    const inningsMap = plays.reduce(\n      (acc: { [inning: string]: TableColumn[] }, p: Play) => {\n        if (!acc[p.beforeState.inning]) {\n          acc[p.beforeState.inning] = [];\n        }\n\n        acc[p.beforeState.inning].push({\n          id: p.id,\n          pitcher: p.pitcher.firstName + \" \" + p.pitcher.lastName,\n          batter: p.batter.firstName + \" \" + p.batter.lastName,\n          pitch: p.pitch,\n          swing: p.swing,\n          diff: p.diff,\n          result: p.result,\n          score: p.afterState.awayScore + \"-\" + p.afterState.homeScore\n        });\n\n        return acc;\n      },\n      {}\n    );\n\n    const inningTableColumns: any[] = [];\n    Object.entries(inningsMap).forEach(([inning, plays], index) => {\n      inningTableColumns.push({\n        id: index,\n        inning: inning,\n        children: plays\n      });\n    });\n\n    return inningTableColumns;\n  }, [plays]);\n\n  return (\n    <div>\n      <Table isTree defaultExpandAllRows rowKey=\"id\" data={data}>\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Inning</Table.HeaderCell>\n          <Table.Cell dataKey=\"inning\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Pitcher</Table.HeaderCell>\n          <Table.Cell dataKey=\"pitcher\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Batter</Table.HeaderCell>\n          <Table.Cell dataKey=\"batter\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Pitch</Table.HeaderCell>\n          <Table.Cell dataKey=\"pitch\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Swing</Table.HeaderCell>\n          <Table.Cell dataKey=\"swing\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Diff</Table.HeaderCell>\n          <Table.Cell dataKey=\"diff\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Result</Table.HeaderCell>\n          <Table.Cell dataKey=\"result\" />\n        </Table.Column>\n\n        <Table.Column flexGrow={1}>\n          <Table.HeaderCell>Score</Table.HeaderCell>\n          <Table.Cell dataKey=\"score\" />\n        </Table.Column>\n      </Table>\n    </div>\n  );\n};\n","import { useMemo } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { Play } from \"../../interfaces/play\";\n\ninterface LineGraphProps {\n  plays: Play[];\n}\n\nexport const LineGraph = (props: LineGraphProps) => {\n  const { plays } = props;\n\n  const options = useMemo(\n    () => ({\n      chart: {\n        id: \"line\",\n        zoom: {\n          enabled: false\n        },\n        redrawOnParentResize: false\n      },\n      xaxis: {\n        categories: [...Array(plays.length).keys()].map(x => ++x)\n      },\n      markers: {\n        size: 5,\n        showNullDataPoints: false\n      },\n      stroke: { width: [7, 2, 5], dashArray: [0, 3, 0] },\n      yaxis: {\n        min: 0,\n        max: 1000\n      }\n    }),\n    [plays]\n  );\n\n  const series = useMemo(\n    () => [\n      {\n        name: \"Pitch\",\n        type: \"line\",\n        data: plays.map((play: Play) => play.pitch)\n      },\n      {\n        name: \"Swing\",\n        type: \"line\",\n        data: plays.map((play: Play) => play.swing)\n      },\n      {\n        name: \"Delta\",\n        type: \"column\",\n        data: plays.map((currentPlay: Play, index: number, plays: Play[]) => {\n          if (index > 0 && plays[index - 1]) {\n            let delta = Math.abs(currentPlay.pitch - plays[index - 1].pitch);\n\n            return delta > 500 ? 1000 - delta : delta;\n            // return Math.abs(delta) > 500 ? delta + 1000 : Math.abs(delta);\n          } else {\n            return null;\n          }\n        })\n      }\n    ],\n    [plays]\n  );\n\n  return (\n    <ReactApexChart\n      options={options}\n      series={series}\n      type=\"line\"\n      height=\"100%\"\n    />\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useGetGameLog } from \"../../../hooks/useGetGameLog/useGetGameLog\";\nimport Select from \"react-select\";\nimport { useGetGames } from \"../../../hooks/useGetGames/useGetGames\";\nimport { Game } from \"../../../interfaces/game\";\nimport { PlayTable } from \"../../playTable/playTable\";\nimport { Play } from \"../../../interfaces/play\";\nimport { LineGraph } from \"../../lineGraph/lineGraph\";\nimport {\n  Container,\n  Content,\n  FlexboxGrid,\n  Header,\n  Loader,\n  Nav,\n  Toggle\n} from \"rsuite\";\nimport { useLeagueToggleContext } from \"../../../context/LeagueToggleContext/leagueToggleContext\";\n\nexport const GamePage: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [selectedSeason, setSelectedSeason] = useState(6);\n  const [selectedSession, setSelectedSession] = useState(1);\n  const [selectedGame, setSelectedGame] = useState<Game>();\n\n  const [gameLog, loadingGameLogs, , fetchGameLog] = useGetGameLog();\n  const [games, loadingGames, , fetchGames] = useGetGames();\n\n  const { currentLeague, setCurrentLeague } = useLeagueToggleContext();\n\n  console.log(currentLeague);\n\n  useEffect(() => {\n    const fetchGamesWrapper = async () => {\n      await fetchGames(selectedSeason, selectedSession);\n    };\n    fetchGamesWrapper();\n\n    setSelectedGame(undefined);\n  }, [selectedSeason, selectedSession, fetchGames]);\n\n  useEffect(() => {\n    if (selectedGame) {\n      fetchGameLog(selectedGame.id);\n    }\n  }, [selectedGame, fetchGameLog]);\n\n  return (\n    <Container style={{ height: \"100%\" }}>\n      <Header>\n        <FlexboxGrid justify=\"space-between\" style={{ padding: 4 }}>\n          <FlexboxGrid.Item>\n            <Toggle\n              size=\"md\"\n              checked={currentLeague === \"milr\"}\n              onChange={(checked: boolean) => {\n                console.log(\"checked\", checked);\n                setCurrentLeague(checked ? \"milr\" : \"mlr\");\n              }}\n              checkedChildren=\"MiLR\"\n              unCheckedChildren=\"MiLR\"\n            />\n          </FlexboxGrid.Item>\n\n          <FlexboxGrid justify=\"end\" style={{ width: \"50%\" }}>\n            <FlexboxGrid.Item colspan={3}>\n              <Select\n                value={{ label: selectedSeason, value: selectedSeason }}\n                styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\n                menuPortalTarget={document.body}\n                onChange={(season: any) => {\n                  setSelectedSeason(season.value);\n                }}\n                options={[...Array(6).keys()]\n                  .map(x => ++x)\n                  .map(s => ({ label: s, value: s }))}\n              />\n            </FlexboxGrid.Item>\n\n            <FlexboxGrid.Item colspan={3}>\n              <Select\n                value={{ label: selectedSession, value: selectedSession }}\n                styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\n                menuPortalTarget={document.body}\n                onChange={(season: any) => {\n                  setSelectedSession(season.value);\n                }}\n                options={[...Array(21).keys()]\n                  .map(x => ++x)\n                  .map(s => ({ label: s, value: s }))}\n              />\n            </FlexboxGrid.Item>\n\n            <FlexboxGrid.Item colspan={6}>\n              <Select\n                isLoading={loadingGames}\n                styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\n                menuPortalTarget={document.body}\n                value={{\n                  label: selectedGame\n                    ? `${selectedGame.awayTeam.name} @ ${selectedGame.homeTeam.name}`\n                    : \"Pick game\",\n                  value: selectedGame\n                }}\n                onChange={(game: any) => {\n                  setSelectedGame(game.value);\n                }}\n                options={games?.map(g => ({\n                  label: `${g.awayTeam.name} @ ${g.homeTeam.name}`,\n                  value: g\n                }))}\n              />\n            </FlexboxGrid.Item>\n          </FlexboxGrid>\n        </FlexboxGrid>\n      </Header>\n\n      <Content style={{ height: \"100%\" }}>\n        <FlexboxGrid\n          justify=\"center\"\n          align=\"middle\"\n          style={{ height: \"100%\", width: \"100%\", flexDirection: \"column\" }}\n        >\n          {loadingGameLogs ? (\n            <Loader size=\"lg\" />\n          ) : selectedGame && gameLog ? (\n            <FlexboxGrid.Item style={{ width: \"100%\", height: \"100%\" }}>\n              <Nav\n                appearance={\"tabs\"}\n                activeKey={selectedTab}\n                onSelect={(e: any) => {\n                  setSelectedTab(e);\n                }}\n              >\n                <Nav.Item eventKey={0}>{selectedGame.awayTeam.name}</Nav.Item>\n                <Nav.Item eventKey={1}>{selectedGame.homeTeam.name}</Nav.Item>\n              </Nav>\n\n              <FlexboxGrid.Item style={{ height: \"auto\" }}>\n                <PlayTable\n                  plays={gameLog\n                    .filter(\n                      (p: Play) =>\n                        p.beforeState.inning[0] ===\n                        (selectedTab === 0 ? \"B\" : \"T\")\n                    )\n                    .reverse()}\n                />\n                <LineGraph\n                  plays={gameLog\n                    .filter(\n                      (p: Play) =>\n                        p.beforeState.inning[0] ===\n                        (selectedTab === 0 ? \"B\" : \"T\")\n                    )\n                    .reverse()}\n                />\n              </FlexboxGrid.Item>\n            </FlexboxGrid.Item>\n          ) : (\n            \"Select a game\"\n          )}\n        </FlexboxGrid>\n      </Content>\n    </Container>\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { Play } from \"../../interfaces/play\";\nimport { useRedditBallApi } from \"../useRedditBallApi/useRedditBallApi\";\n\nexport const useGetGameLog = (): [\n  Play[] | undefined,\n  boolean,\n  any,\n  (gameId: number) => Promise<Play[]>\n] => {\n  const [gameLog, setGameLog] = useState<Play[]>();\n  const { get, response, loading, error } = useRedditBallApi<Play[]>();\n\n  const fetchGameLog = useCallback(\n    async (gameId: number) => {\n      const fetchedGameLog = (await get(`games/${gameId}/log`)) as Play[];\n\n      if (response.ok) {\n        setGameLog(fetchedGameLog);\n      }\n\n      return fetchedGameLog;\n    },\n    [get, setGameLog, response]\n  );\n\n  return [gameLog, loading, error, fetchGameLog];\n};\n","import { useCallback, useState } from \"react\";\nimport { Game } from \"../../interfaces/game\";\nimport { useRedditBallApi } from \"../useRedditBallApi/useRedditBallApi\";\n\nexport const useGetGames = (): [\n  Game[] | undefined,\n  boolean,\n  any,\n  (season: number, session: number) => Promise<Game[]>\n] => {\n  const [games, setGames] = useState<Game[]>();\n  const { get, response, loading, error } = useRedditBallApi<Game[]>();\n\n  const fetchGameLog = useCallback(\n    async (season: number, session: number) => {\n      const fetchedGameLog = (await get(\n        `games/${season}/${session}`\n      )) as Game[];\n\n      if (response.ok) {\n        setGames(fetchedGameLog);\n      }\n\n      return fetchedGameLog;\n    },\n    [get, setGames, response]\n  );\n\n  return [games, loading, error, fetchGameLog];\n};\n","export const PlayerPage: React.FC = () => {\n  return <> Coming soon: a player page.</>;\n};\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport { GamePage } from \"../pages/gamePage/gamePage\";\nimport { PlayerPage } from \"../pages/playerPage/playerPage\";\n\nexport const Routes: React.FC = () => {\n  return (\n    <Router basename=\"/fake-baseball-scouting-page/\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/game\" />\n        <Route path=\"/game\">\n          <GamePage />\n        </Route>\n        <Route path=\"/player\">\n          <PlayerPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Routes } from \"../routes/Routes\";\n\nimport \"rsuite/dist/styles/rsuite-default.css\";\nimport { LeagueToggleContextProvider } from \"../../context/LeagueToggleContext/leagueToggleContext\";\n\nexport const App: React.FC = () => {\n  return (\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\n      <LeagueToggleContextProvider>\n        <Routes />\n      </LeagueToggleContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}