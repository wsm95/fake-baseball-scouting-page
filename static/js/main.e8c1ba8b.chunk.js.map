{"version":3,"sources":["hooks/useMLRApi/useMLRApi.tsx","components/table/table.tsx","components/lineGraph/lineGraph.tsx","components/pages/gamePage/gamePage.tsx","hooks/useGetGameLog/useGetGameLog.tsx","hooks/useGetGames/useGetGames.tsx","components/pages/playerPage/playerPage.tsx","components/routes/Routes.tsx","components/app/App.tsx","index.tsx"],"names":["useMLRApi","apiVerson","useFetch","Table","props","plays","data","React","useMemo","map","p","inning","beforeState","pitcher","firstName","lastName","batter","pitch","swing","diff","result","score","afterState","awayScore","homeScore","columns","Header","accessor","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","style","border","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","borderBottom","background","color","fontWeight","render","row","getRowProps","cells","cell","getCellProps","padding","LineGraph","label","play","index","primary","secondary","series","showPoints","axes","type","position","width","height","marginLeft","tooltip","GamePage","useState","selectedSeason","setSelectedSeason","selectedSession","setSelectedSession","selectedGame","setSelectedGame","console","log","gameLog","setGameLog","get","response","loading","error","useCallback","gameId","a","fetchedGameLog","ok","useGetGameLog","loadingGameLogs","fetchGameLog","games","setGames","season","session","useGetGames","loadingGames","fetchGames","useEffect","fetchGamesWrapper","undefined","id","value","onChange","options","Array","keys","x","s","isLoading","awayTeam","name","homeTeam","game","g","filter","reverse","PlayerPage","Routes","basename","to","exact","from","path","App","className","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8c1ba8b.chunk.js","sourcesContent":["import useFetch from \"use-http\";\n\nexport const useMLRApi = <T,>(apiVerson: string = \"v1\") => {\n  return useFetch<T>(`https://redditball.com/api/${apiVerson}`);\n};\n","import React from \"react\";\nimport { useTable } from \"react-table\";\nimport { Play } from \"../../interfaces/play\";\n\ninterface TableProps {\n  plays: Play[];\n}\n\nexport const Table = (props: TableProps) => {\n  const { plays } = props;\n\n  const data = React.useMemo(\n    () =>\n      plays.map((p: Play) => ({\n        inning: p.beforeState.inning,\n        pitcher: p.pitcher.firstName + \" \" + p.pitcher.lastName,\n        batter: p.batter.firstName + \" \" + p.batter.lastName,\n        pitch: p.pitch,\n        swing: p.swing,\n        diff: p.diff,\n        result: p.result,\n        score: p.afterState.awayScore + \"-\" + p.afterState.homeScore\n      })),\n    [plays]\n  );\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Pitches\",\n        columns: [\n          {\n            Header: \"Inning\",\n            accessor: \"inning\"\n          },\n          {\n            Header: \"Pitcher\",\n            accessor: \"pitcher\"\n          },\n          {\n            Header: \"Batter\",\n            accessor: \"batter\"\n          },\n          {\n            Header: \"Pitch\",\n            accessor: \"pitch\"\n          },\n          {\n            Header: \"Swing\",\n            accessor: \"swing\"\n          },\n          {\n            Header: \"Diff\",\n            accessor: \"diff\"\n          },\n          {\n            Header: \"Result\",\n            accessor: \"result\"\n          },\n          {\n            Header: \"Score\",\n            accessor: \"score\"\n          }\n        ]\n      }\n    ],\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({ columns, data });\n\n  return (\n    <table {...getTableProps()} style={{ border: \"solid 1px blue\" }}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th\n                {...column.getHeaderProps()}\n                style={{\n                  borderBottom: \"solid 3px red\",\n                  background: \"aliceblue\",\n                  color: \"black\",\n                  fontWeight: \"bold\"\n                }}\n              >\n                {column.render(\"Header\")}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map(row => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return (\n                  <td\n                    {...cell.getCellProps()}\n                    style={{\n                      padding: \"10px\",\n                      border: \"solid 1px gray\",\n                      background: \"papayawhip\"\n                    }}\n                  >\n                    {cell.render(\"Cell\")}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { Chart } from \"react-charts\";\nimport { Play } from \"../../interfaces/play\";\n\ninterface LineGraphProps {\n  plays: Play[];\n}\n\nexport const LineGraph = (props: LineGraphProps) => {\n  const { plays } = props;\n\n  const data = useMemo(\n    () => [\n      {\n        label: \"Pitches\",\n        data: plays.map((play: Play, index: number) => ({\n          primary: index,\n          secondary: play.pitch\n        }))\n      }\n    ],\n    [plays]\n  );\n\n  const series = useMemo(\n    () => ({\n      showPoints: true\n    }),\n    []\n  );\n\n  const axes = React.useMemo(\n    () => [\n      { primary: true, type: \"linear\", position: \"bottom\" },\n      { type: \"linear\", position: \"left\" }\n    ],\n    []\n  );\n  return (\n    <div\n      style={{\n        width: \"400px\",\n        height: \"300px\",\n        marginLeft: 16\n      }}\n    >\n      <Chart data={data} series={series} axes={axes} tooltip />\n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useGetGameLog } from \"../../../hooks/useGetGameLog/useGetGameLog\";\nimport Select from \"react-select\";\nimport { useGetGames } from \"../../../hooks/useGetGames/useGetGames\";\nimport { Game } from \"../../../interfaces/game\";\nimport { Table } from \"../../table/table\";\nimport { Play } from \"../../../interfaces/play\";\nimport { LineGraph } from \"../../lineGraph/lineGraph\";\n\nexport const GamePage: React.FC = () => {\n  const [selectedSeason, setSelectedSeason] = useState(6);\n  const [selectedSession, setSelectedSession] = useState(1);\n  const [selectedGame, setSelectedGame] = useState<Game>();\n  console.log(\"selectedGame\", selectedGame);\n  const [gameLog, loadingGameLogs, , fetchGameLog] = useGetGameLog();\n  const [games, loadingGames, , fetchGames] = useGetGames();\n\n  useEffect(() => {\n    const fetchGamesWrapper = async () => {\n      await fetchGames(selectedSeason, selectedSession);\n    };\n    fetchGamesWrapper();\n\n    setSelectedGame(undefined);\n  }, [selectedSeason, selectedSession, fetchGames]);\n\n  useEffect(() => {\n    if (selectedGame) {\n      fetchGameLog(selectedGame.id);\n    }\n  }, [selectedGame, fetchGameLog]);\n\n  return (\n    <div>\n      <Select\n        value={{ label: selectedSeason, value: selectedSeason }}\n        onChange={(season: any) => {\n          setSelectedSeason(season.value);\n        }}\n        options={[...Array(6).keys()]\n          .map(x => ++x)\n          .map(s => ({ label: s, value: s }))}\n      />\n      <Select\n        value={{ label: selectedSession, value: selectedSession }}\n        onChange={(season: any) => {\n          setSelectedSession(season.value);\n        }}\n        options={[...Array(21).keys()]\n          .map(x => ++x)\n          .map(s => ({ label: s, value: s }))}\n      />\n      <Select\n        isLoading={loadingGames}\n        value={{\n          label: selectedGame\n            ? `${selectedGame.awayTeam.name} @ ${selectedGame.homeTeam.name}`\n            : \"Pick game\",\n          value: selectedGame\n        }}\n        onChange={(game: any) => {\n          setSelectedGame(game.value);\n        }}\n        options={games?.map(g => ({\n          label: `${g.awayTeam.name} @ ${g.homeTeam.name}`,\n          value: g\n        }))}\n      />\n      {loadingGameLogs ? (\n        \"Loading...\"\n      ) : selectedGame && gameLog ? (\n        <>\n          <Table\n            plays={gameLog\n              .filter((p: Play) => p.beforeState.inning[0] === `B`)\n              .reverse()}\n          />\n\n          <LineGraph\n            plays={gameLog\n              .filter((p: Play) => p.beforeState.inning[0] === `B`)\n              .reverse()}\n          />\n        </>\n      ) : (\n        \"Select a game\"\n      )}\n    </div>\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { Play } from \"../../interfaces/play\";\nimport { useMLRApi } from \"../useMLRApi/useMLRApi\";\n\nexport const useGetGameLog = (): [\n  Play[] | undefined,\n  boolean,\n  any,\n  (gameId: number) => Promise<Play[]>\n] => {\n  const [gameLog, setGameLog] = useState<Play[]>();\n  const { get, response, loading, error } = useMLRApi<Play[]>();\n\n  const fetchGameLog = useCallback(\n    async (gameId: number) => {\n      const fetchedGameLog = (await get(`games/${gameId}/log`)) as Play[];\n\n      if (response.ok) {\n        setGameLog(fetchedGameLog);\n      }\n\n      return fetchedGameLog;\n    },\n    [get, setGameLog, response]\n  );\n\n  return [gameLog, loading, error, fetchGameLog];\n};\n","import { useCallback, useState } from \"react\";\nimport { Game } from \"../../interfaces/game\";\nimport { useMLRApi } from \"../useMLRApi/useMLRApi\";\n\nexport const useGetGames = (): [\n  Game[] | undefined,\n  boolean,\n  any,\n  (season: number, session: number) => Promise<Game[]>\n] => {\n  const [games, setGames] = useState<Game[]>();\n  const { get, response, loading, error } = useMLRApi<Game[]>();\n\n  const fetchGameLog = useCallback(\n    async (season: number, session: number) => {\n      const fetchedGameLog = (await get(\n        `games/${season}/${session}`\n      )) as Game[];\n\n      if (response.ok) {\n        setGames(fetchedGameLog);\n      }\n\n      return fetchedGameLog;\n    },\n    [get, setGames, response]\n  );\n\n  return [games, loading, error, fetchGameLog];\n};\n","export const PlayerPage: React.FC = () => {\n  return <> Coming soon: a player page.</>;\n};\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link\n} from \"react-router-dom\";\nimport { GamePage } from \"../pages/gamePage/gamePage\";\nimport { PlayerPage } from \"../pages/playerPage/playerPage\";\n\nexport const Routes: React.FC = () => {\n  return (\n    <Router basename=\"/fake-baseball-scouting-page/\">\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Default</Link>\n          </li>\n          <li>\n            <Link to=\"/game\">Game Page</Link>\n          </li>\n          <li>\n            <Link to=\"/player\">Player Page</Link>\n          </li>\n        </ul>\n      </nav>\n\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/game\" />\n        <Route path=\"/game\">\n          <GamePage />\n        </Route>\n        <Route path=\"/player\">\n          <PlayerPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Routes } from \"../routes/Routes\";\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Routes />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}