{"version":3,"sources":["hooks/useMLRApi/useMLRApi.tsx","components/playTable/playTable.tsx","components/lineGraph/lineGraph.tsx","components/pages/gamePage/gamePage.tsx","hooks/useGetGameLog/useGetGameLog.tsx","hooks/useGetGames/useGetGames.tsx","components/pages/playerPage/playerPage.tsx","components/routes/Routes.tsx","components/app/App.tsx","index.tsx"],"names":["useMLRApi","apiVerson","useFetch","PlayTable","props","plays","data","React","useMemo","map","p","inning","beforeState","pitcher","firstName","lastName","batter","pitch","swing","diff","result","score","afterState","awayScore","homeScore","Table","isTree","defaultExpandAllRows","rowKey","height","renderTreeToggle","icon","rowData","Column","HeaderCell","Cell","dataKey","LineGraph","options","chart","id","zoom","enabled","xaxis","categories","Array","length","keys","x","markers","size","showNullDataPoints","series","name","play","type","GamePage","useState","selectedTab","setSelectedTab","console","log","selectedSeason","setSelectedSeason","selectedSession","setSelectedSession","selectedGame","setSelectedGame","gameLog","setGameLog","get","response","loading","error","useCallback","gameId","a","fetchedGameLog","ok","useGetGameLog","loadingGameLogs","fetchGameLog","games","setGames","season","session","useGetGames","loadingGames","fetchGames","useEffect","fetchGamesWrapper","undefined","Container","Header","FlexboxGrid","justify","Item","colspan","value","label","onChange","s","isLoading","awayTeam","homeTeam","game","g","Content","Nav","appearance","activeKey","onSelect","e","eventKey","filter","reverse","PlayerPage","Routes","basename","exact","from","to","path","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7ab5198.chunk.js","sourcesContent":["import useFetch from \"use-http\";\n\nexport const useMLRApi = <T,>(apiVerson: string = \"v1\") => {\n  return useFetch<T>(`https://redditball.com/api/${apiVerson}`);\n};\n","import React from \"react\";\nimport { Play } from \"../../interfaces/play\";\nimport { Table } from \"rsuite\";\n\ninterface PlayTableProps {\n  plays: Play[];\n}\n\nexport const PlayTable = (props: PlayTableProps) => {\n  const { plays } = props;\n\n  const data = React.useMemo(\n    () =>\n      plays.map((p: Play) => ({\n        inning: p.beforeState.inning,\n        pitcher: p.pitcher.firstName + \" \" + p.pitcher.lastName,\n        batter: p.batter.firstName + \" \" + p.batter.lastName,\n        pitch: p.pitch,\n        swing: p.swing,\n        diff: p.diff,\n        result: p.result,\n        score: p.afterState.awayScore + \"-\" + p.afterState.homeScore\n      })),\n    [plays]\n  );\n\n  return (\n    <div>\n      <Table\n        isTree\n        defaultExpandAllRows\n        rowKey=\"id\"\n        height={400}\n        data={data}\n        // onExpandChange={(isOpen, rowData) => {\n        //   console.log(isOpen, rowData);\n        // }}\n        renderTreeToggle={(icon, rowData) => {\n          return icon;\n        }}\n      >\n        <Table.Column>\n          <Table.HeaderCell>Inning</Table.HeaderCell>\n          <Table.Cell dataKey=\"inning\" />\n        </Table.Column>\n\n        <Table.Column>\n          <Table.HeaderCell>Pitcher</Table.HeaderCell>\n          <Table.Cell dataKey=\"pitcher\" />\n        </Table.Column>\n\n        <Table.Column>\n          <Table.HeaderCell>Batter</Table.HeaderCell>\n          <Table.Cell dataKey=\"batter\" />\n        </Table.Column>\n\n        <Table.Column>\n          <Table.HeaderCell>Pitch</Table.HeaderCell>\n          <Table.Cell dataKey=\"pitch\" />\n        </Table.Column>\n\n        <Table.Column>\n          <Table.HeaderCell>Swing</Table.HeaderCell>\n          <Table.Cell dataKey=\"swing\" />\n        </Table.Column>\n\n        <Table.Column>\n          <Table.HeaderCell>Diff</Table.HeaderCell>\n          <Table.Cell dataKey=\"diff\" />\n        </Table.Column>\n\n        <Table.Column>\n          <Table.HeaderCell>Result</Table.HeaderCell>\n          <Table.Cell dataKey=\"result\" />\n        </Table.Column>\n\n        <Table.Column>\n          <Table.HeaderCell>Score</Table.HeaderCell>\n          <Table.Cell dataKey=\"score\" />\n        </Table.Column>\n      </Table>\n    </div>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { Play } from \"../../interfaces/play\";\n\ninterface LineGraphProps {\n  plays: Play[];\n}\n\nexport const LineGraph = (props: LineGraphProps) => {\n  const { plays } = props;\n\n  const options = useMemo(\n    () => ({\n      chart: {\n        id: \"line\",\n        zoom: {\n          enabled: true\n        }\n      },\n      xaxis: {\n        categories: [...Array(plays.length).keys()].map(x => ++x)\n      },\n      markers: {\n        size: 5,\n        showNullDataPoints: false\n      }\n    }),\n    [plays]\n  );\n\n  const series = useMemo(\n    () => [\n      {\n        name: \"pitches\",\n        data: plays.map((play: Play) => play.pitch)\n      }\n    ],\n    [plays]\n  );\n\n  return (\n    <ReactApexChart\n      options={options}\n      series={series}\n      type=\"line\"\n      height={350}\n    />\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useGetGameLog } from \"../../../hooks/useGetGameLog/useGetGameLog\";\nimport Select from \"react-select\";\nimport { useGetGames } from \"../../../hooks/useGetGames/useGetGames\";\nimport { Game } from \"../../../interfaces/game\";\nimport { PlayTable } from \"../../playTable/playTable\";\nimport { Play } from \"../../../interfaces/play\";\nimport { LineGraph } from \"../../lineGraph/lineGraph\";\nimport { Container, Content, FlexboxGrid, Header, Nav } from \"rsuite\";\n\nexport const GamePage: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState(0);\n  console.log(selectedTab);\n  const [selectedSeason, setSelectedSeason] = useState(6);\n  const [selectedSession, setSelectedSession] = useState(1);\n  const [selectedGame, setSelectedGame] = useState<Game>();\n\n  const [gameLog, loadingGameLogs, , fetchGameLog] = useGetGameLog();\n  const [games, loadingGames, , fetchGames] = useGetGames();\n\n  useEffect(() => {\n    const fetchGamesWrapper = async () => {\n      await fetchGames(selectedSeason, selectedSession);\n    };\n    fetchGamesWrapper();\n\n    setSelectedGame(undefined);\n  }, [selectedSeason, selectedSession, fetchGames]);\n\n  useEffect(() => {\n    if (selectedGame) {\n      fetchGameLog(selectedGame.id);\n    }\n  }, [selectedGame, fetchGameLog]);\n\n  return (\n    <div>\n      <Container>\n        <Header>\n          <FlexboxGrid justify=\"end\">\n            <FlexboxGrid.Item colspan={3}>\n              <Select\n                value={{ label: selectedSeason, value: selectedSeason }}\n                onChange={(season: any) => {\n                  setSelectedSeason(season.value);\n                }}\n                options={[...Array(6).keys()]\n                  .map(x => ++x)\n                  .map(s => ({ label: s, value: s }))}\n              />\n            </FlexboxGrid.Item>\n\n            <FlexboxGrid.Item colspan={3}>\n              <Select\n                value={{ label: selectedSession, value: selectedSession }}\n                onChange={(season: any) => {\n                  setSelectedSession(season.value);\n                }}\n                options={[...Array(21).keys()]\n                  .map(x => ++x)\n                  .map(s => ({ label: s, value: s }))}\n              />\n            </FlexboxGrid.Item>\n\n            <FlexboxGrid.Item colspan={6}>\n              <Select\n                isLoading={loadingGames}\n                value={{\n                  label: selectedGame\n                    ? `${selectedGame.awayTeam.name} @ ${selectedGame.homeTeam.name}`\n                    : \"Pick game\",\n                  value: selectedGame\n                }}\n                onChange={(game: any) => {\n                  setSelectedGame(game.value);\n                }}\n                options={games?.map(g => ({\n                  label: `${g.awayTeam.name} @ ${g.homeTeam.name}`,\n                  value: g\n                }))}\n              />\n            </FlexboxGrid.Item>\n          </FlexboxGrid>\n        </Header>\n\n        <Content></Content>\n      </Container>\n\n      {loadingGameLogs ? (\n        \"Loading...\"\n      ) : selectedGame && gameLog ? (\n        <>\n          <Nav\n            appearance={\"tabs\"}\n            activeKey={selectedTab}\n            onSelect={(e: any) => {\n              setSelectedTab(e);\n            }}\n          >\n            <Nav.Item eventKey={0}>{selectedGame.awayTeam.name}</Nav.Item>\n            <Nav.Item eventKey={1}>{selectedGame.homeTeam.name}</Nav.Item>\n          </Nav>\n\n          {selectedTab === 0 ? (\n            <>\n              <PlayTable\n                plays={gameLog\n                  .filter((p: Play) => p.beforeState.inning[0] === `B`)\n                  .reverse()}\n              />\n              <LineGraph\n                plays={gameLog\n                  .filter((p: Play) => p.beforeState.inning[0] === `B`)\n                  .reverse()}\n              />\n            </>\n          ) : (\n            <>\n              <PlayTable\n                plays={gameLog\n                  .filter((p: Play) => p.beforeState.inning[0] === `T`)\n                  .reverse()}\n              />\n              <LineGraph\n                plays={gameLog\n                  .filter((p: Play) => p.beforeState.inning[0] === `T`)\n                  .reverse()}\n              />\n            </>\n          )}\n        </>\n      ) : (\n        \"Select a game\"\n      )}\n    </div>\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { Play } from \"../../interfaces/play\";\nimport { useMLRApi } from \"../useMLRApi/useMLRApi\";\n\nexport const useGetGameLog = (): [\n  Play[] | undefined,\n  boolean,\n  any,\n  (gameId: number) => Promise<Play[]>\n] => {\n  const [gameLog, setGameLog] = useState<Play[]>();\n  const { get, response, loading, error } = useMLRApi<Play[]>();\n\n  const fetchGameLog = useCallback(\n    async (gameId: number) => {\n      const fetchedGameLog = (await get(`games/${gameId}/log`)) as Play[];\n\n      if (response.ok) {\n        setGameLog(fetchedGameLog);\n      }\n\n      return fetchedGameLog;\n    },\n    [get, setGameLog, response]\n  );\n\n  return [gameLog, loading, error, fetchGameLog];\n};\n","import { useCallback, useState } from \"react\";\nimport { Game } from \"../../interfaces/game\";\nimport { useMLRApi } from \"../useMLRApi/useMLRApi\";\n\nexport const useGetGames = (): [\n  Game[] | undefined,\n  boolean,\n  any,\n  (season: number, session: number) => Promise<Game[]>\n] => {\n  const [games, setGames] = useState<Game[]>();\n  const { get, response, loading, error } = useMLRApi<Game[]>();\n\n  const fetchGameLog = useCallback(\n    async (season: number, session: number) => {\n      const fetchedGameLog = (await get(\n        `games/${season}/${session}`\n      )) as Game[];\n\n      if (response.ok) {\n        setGames(fetchedGameLog);\n      }\n\n      return fetchedGameLog;\n    },\n    [get, setGames, response]\n  );\n\n  return [games, loading, error, fetchGameLog];\n};\n","export const PlayerPage: React.FC = () => {\n  return <> Coming soon: a player page.</>;\n};\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport { GamePage } from \"../pages/gamePage/gamePage\";\nimport { PlayerPage } from \"../pages/playerPage/playerPage\";\n\nexport const Routes: React.FC = () => {\n  return (\n    <Router basename=\"/fake-baseball-scouting-page/\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/game\" />\n        <Route path=\"/game\">\n          <GamePage />\n        </Route>\n        <Route path=\"/player\">\n          <PlayerPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Routes } from \"../routes/Routes\";\n\nimport \"rsuite/dist/styles/rsuite-default.css\";\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Routes />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}